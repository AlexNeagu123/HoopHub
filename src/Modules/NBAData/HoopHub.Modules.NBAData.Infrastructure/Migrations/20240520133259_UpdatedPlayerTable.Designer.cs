// <auto-generated />
using System;
using HoopHub.Modules.NBAData.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HoopHub.Modules.NBAData.Infrastructure.Migrations
{
    [DbContext(typeof(NBADataContext))]
    [Migration("20240520133259_UpdatedPlayerTable")]
    partial class UpdatedPlayerTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("nba_data")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.PlayerTeamSeasons.PlayerTeamSeason", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.HasKey("PlayerId", "TeamId", "SeasonId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("player_team_season", "nba_data");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.Players.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ApiId")
                        .HasColumnType("integer")
                        .HasColumnName("api_id");

                    b.Property<decimal?>("AverageRating")
                        .HasColumnType("numeric")
                        .HasColumnName("average_rating");

                    b.Property<string>("College")
                        .HasColumnType("text")
                        .HasColumnName("college");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<Guid?>("CurrentTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("current_team_id");

                    b.Property<int?>("DraftNumber")
                        .HasColumnType("integer")
                        .HasColumnName("draft_number");

                    b.Property<int?>("DraftRound")
                        .HasColumnType("integer")
                        .HasColumnName("draft_round");

                    b.Property<int?>("DraftYear")
                        .HasColumnType("integer")
                        .HasColumnName("draft_year");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Height")
                        .HasColumnType("text")
                        .HasColumnName("height");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("JerseyNumber")
                        .HasColumnType("text")
                        .HasColumnName("jersey_number");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Position")
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<string>("Weight")
                        .HasColumnType("text")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("CurrentTeamId");

                    b.ToTable("players", "nba_data");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.Seasons.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("SeasonPeriod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("season");

                    b.HasKey("Id");

                    b.ToTable("seasons", "nba_data");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.Standings.PlayoffSeries", b =>
                {
                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<Guid>("WinningTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("winning_team_id");

                    b.Property<Guid>("LosingTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("losing_team_id");

                    b.Property<int>("LosingTeamRank")
                        .HasColumnType("integer")
                        .HasColumnName("losing_team_rank");

                    b.Property<int>("LosingTeamWins")
                        .HasColumnType("integer")
                        .HasColumnName("losing_team_wins");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stage");

                    b.Property<int>("WinningTeamRank")
                        .HasColumnType("integer")
                        .HasColumnName("winning_team_rank");

                    b.Property<int>("WinningTeamWins")
                        .HasColumnType("integer")
                        .HasColumnName("winning_team_wins");

                    b.HasKey("SeasonId", "WinningTeamId", "LosingTeamId");

                    b.HasIndex("LosingTeamId");

                    b.HasIndex("WinningTeamId");

                    b.ToTable("playoff_series", "nba_data");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.Standings.StandingsEntry", b =>
                {
                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<string>("EasternRecord")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("eastern_record");

                    b.Property<string>("Home")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("home");

                    b.Property<string>("Overall")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("overall");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<string>("Road")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("road");

                    b.Property<string>("WesternRecord")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("western_record");

                    b.HasKey("SeasonId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("standings", "nba_data");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.TeamBios.TeamBio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("DRtg")
                        .HasColumnType("double precision")
                        .HasColumnName("d_rtg");

                    b.Property<string>("Finish")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("finish");

                    b.Property<int>("LossCount")
                        .HasColumnType("integer")
                        .HasColumnName("loss_count");

                    b.Property<double>("ORtg")
                        .HasColumnType("double precision")
                        .HasColumnName("o_rtg");

                    b.Property<double>("Pace")
                        .HasColumnType("double precision")
                        .HasColumnName("pace");

                    b.Property<string>("Playoffs")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("playoffs");

                    b.Property<double>("RelPace")
                        .HasColumnType("double precision")
                        .HasColumnName("rel_pace");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<double>("Srs")
                        .HasColumnType("double precision")
                        .HasColumnName("srs");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<int>("WinCount")
                        .HasColumnType("integer")
                        .HasColumnName("win_count");

                    b.Property<double>("WinLossRatio")
                        .HasColumnType("double precision")
                        .HasColumnName("win_loss_ratio");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("teams_bio", "nba_data");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.Teams.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("abbreviation");

                    b.Property<int>("ApiId")
                        .HasColumnType("integer")
                        .HasColumnName("api_id");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Conference")
                        .HasColumnType("text")
                        .HasColumnName("conference");

                    b.Property<string>("Division")
                        .HasColumnType("text")
                        .HasColumnName("division");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("Id");

                    b.ToTable("teams", "nba_data");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.TeamsLatest.TeamLatest", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<int>("LatestIndex")
                        .HasColumnType("integer")
                        .HasColumnName("latest_index");

                    b.Property<string>("GameDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("game_date");

                    b.HasKey("TeamId", "LatestIndex");

                    b.ToTable("team_latest", "nba_data");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.PlayerTeamSeasons.PlayerTeamSeason", b =>
                {
                    b.HasOne("HoopHub.Modules.NBAData.Domain.Players.Player", "Player")
                        .WithMany("PlayerTeamSeasons")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoopHub.Modules.NBAData.Domain.Seasons.Season", "Season")
                        .WithMany("PlayerTeamSeasons")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoopHub.Modules.NBAData.Domain.Teams.Team", "Team")
                        .WithMany("PlayerTeamSeasons")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.Players.Player", b =>
                {
                    b.HasOne("HoopHub.Modules.NBAData.Domain.Teams.Team", "CurrentTeam")
                        .WithMany("Players")
                        .HasForeignKey("CurrentTeamId");

                    b.Navigation("CurrentTeam");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.Standings.PlayoffSeries", b =>
                {
                    b.HasOne("HoopHub.Modules.NBAData.Domain.Teams.Team", "LosingTeam")
                        .WithMany()
                        .HasForeignKey("LosingTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoopHub.Modules.NBAData.Domain.Seasons.Season", "Season")
                        .WithMany("PlayoffSeries")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoopHub.Modules.NBAData.Domain.Teams.Team", "WinningTeam")
                        .WithMany("PlayoffSeries")
                        .HasForeignKey("WinningTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LosingTeam");

                    b.Navigation("Season");

                    b.Navigation("WinningTeam");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.Standings.StandingsEntry", b =>
                {
                    b.HasOne("HoopHub.Modules.NBAData.Domain.Seasons.Season", "Season")
                        .WithMany("Standings")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoopHub.Modules.NBAData.Domain.Teams.Team", "Team")
                        .WithMany("Standings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.TeamBios.TeamBio", b =>
                {
                    b.HasOne("HoopHub.Modules.NBAData.Domain.Seasons.Season", "Season")
                        .WithMany("TeamBio")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoopHub.Modules.NBAData.Domain.Teams.Team", "Team")
                        .WithMany("TeamBio")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.TeamsLatest.TeamLatest", b =>
                {
                    b.HasOne("HoopHub.Modules.NBAData.Domain.Teams.Team", "Team")
                        .WithMany("TeamLatest")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.Players.Player", b =>
                {
                    b.Navigation("PlayerTeamSeasons");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.Seasons.Season", b =>
                {
                    b.Navigation("PlayerTeamSeasons");

                    b.Navigation("PlayoffSeries");

                    b.Navigation("Standings");

                    b.Navigation("TeamBio");
                });

            modelBuilder.Entity("HoopHub.Modules.NBAData.Domain.Teams.Team", b =>
                {
                    b.Navigation("PlayerTeamSeasons");

                    b.Navigation("Players");

                    b.Navigation("PlayoffSeries");

                    b.Navigation("Standings");

                    b.Navigation("TeamBio");

                    b.Navigation("TeamLatest");
                });
#pragma warning restore 612, 618
        }
    }
}
